.box-header
  %nav.navbar.navbar-default
    .navbar-header
      %button.navbar-toggle.collapsed{'data-target' => '#options-navbar-collapse', 'data-toggle' => 'collapse', 'type' => 'button'}
        %span.sr-only Toggle navigation
        %span.icon-bar
        %span.icon-bar
        %span.icon-bar
    #options-navbar-collapse.collapse.navbar-collapse
      = simple_form_for @options, as: :options, url: analytics_board_path(@board), method: :get, remote: true, html: {class: 'navbar-form navbar-left'} do |f|
        = f.input :by, as: :radio_buttons, collection: %W(day hour minute)
        = f.input :since, as: :date_picker, data: { showClear: true, showClose: true, showTodayButton: true }
        = f.input :until, as: :date_picker, data: { showClear: true, showClose: true, showTodayButton: true }
        = f.submit 'Search', class: 'btn btn-primary'
.box-body
  .row
    - linked_identities = 0
    - AuthenticationProvider.all.each do |provider|
      - if provider.needs_authentication?
        .col-md-3.col-xs-6
          - if current_user.is_connected_to?(provider.name)
            - linked_identities += 1
            .info-box
              .info-box-icon{class: "btn-#{provider.name}"}
                %i.ion{class: "ion-social-#{provider.name}"}
              .info-box-content
                .info-box-text
                  #{provider.title} contents
                .info-box-number
                  = @board.all_cards.by_provider(provider.name).created_between(@options.since, @options.until).count
          - else
            .info-box
              .info-box-icon.bg-red
                %i.ion{class: "ion-social-#{provider.name}"}
              .info-box-content
                .info-box-text
                  #{provider.title} contents
                .info-box-number
                  = @board.all_cards.by_provider(provider.name).count
                .pull-right
                  = link_to omniauth_authorize_path(:user, provider.name), class: 'small-box-footer', title: "To populate your boards, please link your #{provider.title} account" do
                    connect
                    %i.fa.fa-fw.fa-arrow-circle-right
  - if @board.cards.any?
    .panel.panel-default
      .panel-body
        .chart-responsive= pie_chart charts_board_path(@board, chart_id: 'topics_summary', options: @options.to_hash, format: :json), library: {title: {text: "topics summary"}}
    .panel.panel-default
      .panel-body
        .chart-responsive= bar_chart charts_board_path(@board, chart_id: 'hashtags', options: @options.to_hash, format: :json), library: {title: {text: "hashtags summary"}, xAxis: {title: {text: 'top hashtags'}}, yAxis: {title: {text: 'occurrences'}}}
    .panel.panel-default
      .panel-body
        #buzz.chart-responsive
    - AuthenticationProvider.all.each do |provider|
      - if @board.has_feeds_from?(provider)
        .box.box-info
          .box-header
            %h3.box-title #{provider.title} stats
          .box-body
            .row
              .col-md-4
                .panel.panel-default
                  .panel-body
                    .chart-responsive.user-lookup= bar_chart charts_board_path(@board, chart_id: 'top_influencers', options: @options.to_hash.merge(provider_name: provider.name), format: :json), library: { title: { text: "top influencers on #{provider.title}" }, yAxis: { title: { text: 'engagement deviation' } } }
              .col-md-4
                .panel.panel-default
                  .panel-body
                    .chart-responsive.user-lookup= bar_chart charts_board_path(@board, chart_id: 'top_contributors', options: @options.to_hash.merge(provider_name: provider.name), format: :json), library: { title: { text: "top contributors on #{provider.title}"}, yAxis: { title: { text: 'contributions' } } }
              .col-md-4
                .panel.panel-default
                  .panel-body
                    .chart-responsive.user-lookup= bar_chart charts_board_path(@board, chart_id: 'most_engaging_people', options: @options.to_hash.merge(provider_name: provider.name), format: :json), library: { title: { text: "most engaging on #{provider.title}"}, yAxis: { title: { text: 'direct engagement' } } }
            .row
              - if provider.allows_likes?
                .col-md-4
                  .panel.panel-default
                    .panel-body
                      .chart-responsive.user-lookup= bar_chart charts_board_path(@board, chart_id: 'most_liked_people', options: @options.to_hash.merge(provider_name: provider.name), format: :json), library: { title: { text: "most liked on #{provider.title}"}, yAxis: { title: { text: 'likes received' } } }
              - if provider.allows_sharing?
                .col-md-4
                  .panel.panel-default
                    .panel-body
                      .chart-responsive.user-lookup= bar_chart charts_board_path(@board, chart_id: 'most_shared_people', options: @options.to_hash.merge(provider_name: provider.name), format: :json), library: { title: { text: "most shared on #{provider.title}"}, yAxis: { title: { text: 'contributions shared by others' } } }
              - if provider.allows_comments?
                .col-md-4
                  .panel.panel-default
                    .panel-body
                      .chart-responsive.user-lookup= bar_chart charts_board_path(@board, chart_id: 'most_commented_people', options: @options.to_hash.merge(provider_name: provider.name), format: :json), library: { title: { text: "most commented on #{provider.title}"}, yAxis: { title: { text: 'comments received' } } }

:javascript
  var url = '#{charts_board_path(@board, chart_id: 'buzz', options: @options.to_hash, format: :json)}';
  var utcOffset = moment().utcOffset() / 60;

  $.get(url, function(data) {
    var result = $.map(data, function(series, i) {
      series.data = $.map(series.data, function(item, j) {
        date = new Date(Date.UTC(item[0].year, item[0].month - 1, item[0].day, item[0].hour || -utcOffset, item[0].minute || 0));
        return [[date, item[1]]];
      });
      return series;
    });
    new Chartkick.ColumnChart("buzz", result, {
      stacked: true,
      library: {
        title: {text: 'buzz on these topics', style: 'font.size: 14px'},
        xAxis: {title: {text: 'time'}},
        yAxis: {title: {text: 'contents produced'}}
      }
    });
  });
